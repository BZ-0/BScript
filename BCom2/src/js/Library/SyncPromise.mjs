//
const $thenOf = ($r) => {
    if ($r instanceof Promise || $r instanceof SyncPromise) {
        return $r?.then?.(($) => $)?.catch?.(console.error)
    }
    return $r
}

//
const $syncOf = ($r) => {
    if ($r instanceof Promise || $r instanceof SyncPromise) {
        return ($r?.["&sync"] ?? $r?.then)?.call($r, ($) => $)?.catch?.(console.error)
    }
    return $r
}

//
const $catchOf = ($r) => {
    if ($r instanceof Promise || $r instanceof SyncPromise) {
        return $r?.catch?.(($) => $)
    }
    return $r
}

//
export default class SyncPromise {
    constructor(fn, buffer, coder) {
        this["&coder"] = coder
        this["&buffer"] = buffer
        this["&promise"] = fn instanceof Promise ? fn : fn(this["&resolve"].bind(this), this["&reject"].bind(this))
        this["&resolved"] = undefined
        this["&rejected"] = undefined
    }

    //
    get ["&data"]() {
        if (typeof SharedArrayBuffer != "undefined" && this["&buffer"] instanceof SharedArrayBuffer) {
            return this["&coder"].waitResponseSync(this["&buffer"])[0][0].$args[0]
        } else if (this["&promise"] instanceof Promise) {
            return this["&promise"]
        }
        return (this["&resolved"] ?? this["&rejected"])?.[0]
    }

    //
    get ["&synced"]() {
        return this["&sync"](($) => $)
    }
    get ["*"]() {
        return this["&sync"](($) => $)
    }

    //
    get ["&sync"]() {
        const $dat = this["&data"]
        if ($dat instanceof Promise) return $dat?.["then"]?.bind($dat)
        return (fn) => {
            $syncOf(fn($dat))
        }
    }

    //
    get then() {
        const $prom = this["&promise"]
        if ($prom instanceof Promise) return $prom?.["then"]?.bind($prom)
        return (fn) => {
            $thenOf(fn(this["&data"]))
        }
    }

    //
    get catch() {
        if (this["&promise"] instanceof Promise) {
            return this["&promise"]?.["catch"]?.bind(this["&promise"])
        }
        return (fn) => {
            $catchOf(fn(...this["&rejected"]))
        }
    }

    //
    get finally() {
        if (this["&promise"] instanceof Promise) {
            return this["&promise"]?.["finally"]?.bind(this["&promise"])
        }
        return (fn) => {
            $thenOf(fn(...(this["&resolved"] ?? this["&rejected"])))
        }
    }

    //
    ["&resolve"](...args) {
        this["&resolved"] = args
    }
    ["&reject"](...args) {
        this["&rejected"] = args
    }
}

//
export const $getter = (
    holder,
    trigger = ($) => {
        return $
    }
) => {
    const ref = new WeakRef(holder)
    return {
        ["&typeof"]: "getter",
        get ["&data"]() {
            const holder = ref.deref()
            if (holder instanceof Promise) {
                return holder.then(trigger)
            } else if (holder instanceof SyncPromise || holder?.["&typeof"] == "promise") {
                return holder?.["&sync"](trigger)
            }
            return trigger(holder)
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
