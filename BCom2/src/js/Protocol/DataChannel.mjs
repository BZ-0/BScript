// @ts-nocheck
"use strict"

//
import { uuidv4 } from "../Library/Symbols.mjs"
import { wrapFunc } from "../Reflection/DirectReflection.mjs"
import { ReadbackReflection } from "../Reflection/DirectReflection.mjs"

//
export default class DataChannel {
    /** @type {WorkerHandler|SocketHandler|BaseHandler} */
    #handle = null

    /** @type {String} */
    #cid = ""

    /** @type {ReferenceDictionary} */
    #dictionary = null

    /** @type {Map<String, Object>} */
    #promised = new Map()

    /** @type {MessageHandler} */
    #message = null

    /**
     *
     * @param {String} cid
     * @param {ReferenceDictionary} dictionary
     * @param {WorkerHandler|SocketHandler|BaseHandler} handle
     * @param {MessageHandler} message
     */
    constructor(cid, dictionary, handle, message) {
        this.#cid = cid
        this.#dictionary = dictionary
        this.#promised = new Map()
        this.#handle = handle
        this.#message = message
    }

    //
    #newUUID() {
        return crypto?.randomUUID?.() ?? uuidv4()
    }

    //
    $finalizer($holder) {
        this.#message.$finalizer($holder, this.#cid)
        return this
    }

    //
    $promise() {
        const $p = { $resolve: null, $reject: null }
        Object.assign($p, {
            ["&data"]: new Promise(($resolve, $reject) => {
                $p.$resolve = $resolve
                $p.$reject = $reject
            }),
            ["&code"]: {
                "&isCode": true,
                "&local": this.#newUUID()
            }
        })
        this.#promised.set($p["&code"]["&local"], $p)
        return $p
    }

    // send identifier report to promised
    $feedback($meta, $transfered) {
        return this.#handle.$feedback(
            {
                "&cmd": "feedback",
                "&cid": this.#cid
            },
            {
                ...$meta,
                ...this.#dictionary.$temp($transfered)?.["&code"]
            }
        )
    }

    // when encoding...
    $transfer($transferable = [], $shared = []) {
        const $obj = this.#handle.$transfer(this.#cid, $transferable, $shared)
        return new Proxy(
            wrapFunc({
                ...$obj
            }),
            new ReadbackReflection(this.#handle)
        )
    }

    //
    handleMessage({ $cmd }, { "&local": $local, "&origin": $origin }) {
        switch ($cmd) {
            case "feedback": {
                const $promised = this.#promised.get($local)
                this.#promised.delete($local)
                $promised.$resolve({ "&origin": $origin })
            } //break;
            default:
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dWlkdjQiLCJ3cmFwRnVuYyIsIlJlYWRiYWNrUmVmbGVjdGlvbiIsIkRhdGFDaGFubmVsIiwiaGFuZGxlIiwiY2lkIiwiZGljdGlvbmFyeSIsInByb21pc2VkIiwiTWFwIiwibWVzc2FnZSIsImNvbnN0cnVjdG9yIiwibmV3VVVJRCIsIiNuZXdVVUlEIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsIiRmaW5hbGl6ZXIiLCIkaG9sZGVyIiwiJHByb21pc2UiLCIkcCIsIiRyZXNvbHZlIiwiJHJlamVjdCIsIk9iamVjdCIsImFzc2lnbiIsIlByb21pc2UiLCJzZXQiLCIkZmVlZGJhY2siLCIkbWV0YSIsIiR0cmFuc2ZlcmVkIiwiJHRlbXAiLCIkdHJhbnNmZXIiLCIkdHJhbnNmZXJhYmxlIiwiJHNoYXJlZCIsIiRvYmoiLCJQcm94eSIsImhhbmRsZU1lc3NhZ2UiLCIkY21kIiwiJGxvY2FsIiwiJG9yaWdpbiIsIiRwcm9taXNlZCIsImdldCIsImRlbGV0ZSJdLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcQlowXFxCQ29tMlxcc3JjXFxjaXZldFxcUHJvdG9jb2xcXERhdGFDaGFubmVsLmNpdmV0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1ub2NoZWNrXG5cInVzZSBzdHJpY3RcIjtcblxuLy9cbmltcG9ydCB7IHV1aWR2NCB9IGZyb20gXCIuLi9MaWJyYXJ5L1N5bWJvbHNcIjtcbmltcG9ydCB7IHdyYXBGdW5jIH0gZnJvbSBcIi4uL1JlZmxlY3Rpb24vRGlyZWN0UmVmbGVjdGlvblwiO1xuaW1wb3J0IHsgUmVhZGJhY2tSZWZsZWN0aW9uIH0gZnJvbSBcIi4uL1JlZmxlY3Rpb24vRGlyZWN0UmVmbGVjdGlvblwiO1xuXG4vL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YUNoYW5uZWwge1xuICAgIC8qKiBAdHlwZSB7V29ya2VySGFuZGxlcnxTb2NrZXRIYW5kbGVyfEJhc2VIYW5kbGVyfSAqL1xuICAgICNoYW5kbGUgPSBudWxsO1xuXG4gICAgLyoqIEB0eXBlIHtTdHJpbmd9ICovXG4gICAgI2NpZCA9IFwiXCI7XG5cbiAgICAvKiogQHR5cGUge1JlZmVyZW5jZURpY3Rpb25hcnl9ICovXG4gICAgI2RpY3Rpb25hcnkgPSBudWxsO1xuXG4gICAgLyoqIEB0eXBlIHtNYXA8U3RyaW5nLCBPYmplY3Q+fSAqL1xuICAgICNwcm9taXNlZCA9IG5ldyBNYXAoKTtcblxuICAgIC8qKiBAdHlwZSB7TWVzc2FnZUhhbmRsZXJ9ICovXG4gICAgI21lc3NhZ2UgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNpZCBcbiAgICAgKiBAcGFyYW0ge1JlZmVyZW5jZURpY3Rpb25hcnl9IGRpY3Rpb25hcnkgXG4gICAgICogQHBhcmFtIHtXb3JrZXJIYW5kbGVyfFNvY2tldEhhbmRsZXJ8QmFzZUhhbmRsZXJ9IGhhbmRsZSBcbiAgICAgKiBAcGFyYW0ge01lc3NhZ2VIYW5kbGVyfSBtZXNzYWdlIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNpZCwgZGljdGlvbmFyeSwgaGFuZGxlLCBtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuI2NpZCA9IGNpZDtcbiAgICAgICAgdGhpcy4jZGljdGlvbmFyeSA9IGRpY3Rpb25hcnk7XG4gICAgICAgIHRoaXMuI3Byb21pc2VkID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLiNoYW5kbGUgPSBoYW5kbGU7XG4gICAgICAgIHRoaXMuI21lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cblxuICAgIC8vXG4gICAgI25ld1VVSUQoKSB7IHJldHVybiAoY3J5cHRvPy5yYW5kb21VVUlEPy4oKSA/PyB1dWlkdjQoKSk7IH1cblxuICAgIC8vXG4gICAgJGZpbmFsaXplcigkaG9sZGVyKSB7XG4gICAgICAgIHRoaXMuI21lc3NhZ2UuJGZpbmFsaXplcigkaG9sZGVyLCB0aGlzLiNjaWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvL1xuICAgICRwcm9taXNlKCkge1xuICAgICAgICBjb25zdCAkcCA9IHsgJHJlc29sdmU6IG51bGwsICRyZWplY3Q6IG51bGwgfTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbigkcCwge1xuICAgICAgICAgICAgW1wiJmRhdGFcIl06IG5ldyBQcm9taXNlKCgkcmVzb2x2ZSwgJHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICRwLiRyZXNvbHZlID0gJHJlc29sdmU7XG4gICAgICAgICAgICAgICAgJHAuJHJlamVjdCA9ICRyZWplY3Q7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFtcIiZjb2RlXCJdOiB7XG4gICAgICAgICAgICAgICAgXCImaXNDb2RlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCImbG9jYWxcIjogdGhpcy4jbmV3VVVJRCgpIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jcHJvbWlzZWQuc2V0KCRwW1wiJmNvZGVcIl1bXCImbG9jYWxcIl0sICRwKTtcbiAgICAgICAgcmV0dXJuICRwO1xuICAgIH1cblxuICAgIC8vIHNlbmQgaWRlbnRpZmllciByZXBvcnQgdG8gcHJvbWlzZWRcbiAgICAkZmVlZGJhY2soJG1ldGEsICR0cmFuc2ZlcmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoYW5kbGUuJGZlZWRiYWNrKHtcbiAgICAgICAgICAgIFwiJmNtZFwiOiBcImZlZWRiYWNrXCIsIFxuICAgICAgICAgICAgXCImY2lkXCI6IHRoaXMuI2NpZFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICAuLi4kbWV0YSxcbiAgICAgICAgICAgIC4uLnRoaXMuI2RpY3Rpb25hcnkuJHRlbXAoJHRyYW5zZmVyZWQpPy5bXCImY29kZVwiXVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyB3aGVuIGVuY29kaW5nLi4uXG4gICAgJHRyYW5zZmVyKCR0cmFuc2ZlcmFibGUgPSBbXSwgJHNoYXJlZCA9IFtdKSB7XG4gICAgICAgIGNvbnN0ICRvYmogPSB0aGlzLiNoYW5kbGUuJHRyYW5zZmVyKHRoaXMuI2NpZCwgJHRyYW5zZmVyYWJsZSwgJHNoYXJlZCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkod3JhcEZ1bmMoe1xuICAgICAgICAgICAgLi4uJG9ialxuICAgICAgICB9KSwgbmV3IFJlYWRiYWNrUmVmbGVjdGlvbih0aGlzLiNoYW5kbGUpKTtcbiAgICB9XG5cbiAgICAvL1xuICAgIGhhbmRsZU1lc3NhZ2UoeyRjbWR9LCB7XCImbG9jYWxcIjogJGxvY2FsLCBcIiZvcmlnaW5cIjogJG9yaWdpbn0pIHtcbiAgICAgICAgc3dpdGNoICgkY21kKSB7XG4gICAgICAgICAgICBjYXNlIFwiZmVlZGJhY2tcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0ICRwcm9taXNlZCA9IHRoaXMuI3Byb21pc2VkLmdldCgkbG9jYWwpO1xuICAgICAgICAgICAgICAgIHRoaXMuI3Byb21pc2VkLmRlbGV0ZSgkbG9jYWwpO1xuICAgICAgICAgICAgICAgICRwcm9taXNlZC4kcmVzb2x2ZSh7XCImb3JpZ2luXCI6ICRvcmlnaW59KTtcbiAgICAgICAgICAgIH0gLy9icmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIH1cbiAgICB9XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFk7O0FBRUE7QUFDQSxTQUFTQSxNQUFNO0FBQ2YsU0FBU0MsUUFBUTtBQUNqQixTQUFTQyxrQkFBa0I7O0FBRTNCO0FBQ0EsZUFBZSxNQUFNQyxXQUFXLENBQUM7RUFDN0I7RUFDQSxDQUFBQyxNQUFPLEdBQUcsSUFBSTs7RUFFZDtFQUNBLENBQUFDLEdBQUksR0FBRyxFQUFFOztFQUVUO0VBQ0EsQ0FBQUMsVUFBVyxHQUFHLElBQUk7O0VBRWxCO0VBQ0EsQ0FBQUMsUUFBUyxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDOztFQUVyQjtFQUNBLENBQUFDLE9BQVEsR0FBRyxJQUFJOztFQUVmO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLFdBQVdBLENBQUNMLEdBQUcsRUFB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
