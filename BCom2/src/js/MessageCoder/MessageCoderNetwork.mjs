// @ts-nocheck
"use strict"

// needs async support?
import { _LOG_ } from "../Library/Symbols.mjs"
import MessageCoderAsync from "./MessageCoderAsync.mjs"

// for protocol
export default class MessageCoderNetwork extends MessageCoderAsync {
    //
    constructor($sup) {
        super($sup)
    }

    //
    async decodeMessage([$message = null], $shared = []) {
        const _unwrap_ = await (
            this.$decode ||
            (async (e) => {
                return (await this.$msgpck)?.decode(e, { useBigInt64: true })
            })
        )?.(new Uint8Array(await $message))
        _unwrap_.$args = await Promise.all(_unwrap_.$args?.map?.((m) => this.decodeMember(m, $shared)) ?? [])
        return [[_unwrap_], []]
    }

    //
    async encodeMessage([$data], $shared = []) {
        $data.$args = await Promise.all($data.$args?.map?.((e) => this.encodeMember(e, $shared)) ?? [])
        const _wrap_ = await (
            this.$encode ||
            (async (e) => {
                return (await this.$msgpck)?.encode(e, { useBigInt64: true })
            })
        )?.($data)
        return [[_wrap_], []]
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTE9HXyIsIk1lc3NhZ2VDb2RlckFzeW5jIiwiTWVzc2FnZUNvZGVyTmV0d29yayIsImNvbnN0cnVjdG9yIiwiJHN1cCIsImRlY29kZU1lc3NhZ2UiLCIkbWVzc2FnZSIsIiRzaGFyZWQiLCJfdW53cmFwXyIsIiRkZWNvZGUiLCJlIiwiJG1zZ3BjayIsImRlY29kZSIsInVzZUJpZ0ludDY0IiwiVWludDhBcnJheSIsIiRhcmdzIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsIm0iLCJkZWNvZGVNZW1iZXIiLCJlbmNvZGVNZXNzYWdlIiwiJGRhdGEiLCJlbmNvZGVNZW1iZXIiLCJfd3JhcF8iLCIkZW5jb2RlIiwiZW5jb2RlIl0sInNvdXJjZXMiOlsiQzpcXFByb2plY3RzXFxCWjBcXEJDb20yXFxzcmNcXGNpdmV0XFxNZXNzYWdlQ29kZXJcXE1lc3NhZ2VDb2Rlck5ldHdvcmsuY2l2ZXQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLW5vY2hlY2tcblwidXNlIHN0cmljdFwiO1xuXG4vLyBuZWVkcyBhc3luYyBzdXBwb3J0P1xuaW1wb3J0IHsgX0xPR18gfSBmcm9tIFwiLi4vTGlicmFyeS9TeW1ib2xzXCI7XG5pbXBvcnQgTWVzc2FnZUNvZGVyQXN5bmMgZnJvbSBcIi4vTWVzc2FnZUNvZGVyQXN5bmNcIjtcblxuLy8gZm9yIHByb3RvY29sXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlQ29kZXJOZXR3b3JrIGV4dGVuZHMgTWVzc2FnZUNvZGVyQXN5bmMge1xuXG4gICAgLy9cbiAgICBjb25zdHJ1Y3Rvcigkc3VwKSB7XG4gICAgICAgIHN1cGVyKCRzdXApO1xuICAgIH1cblxuICAgIC8vXG4gICAgYXN5bmMgZGVjb2RlTWVzc2FnZShbJG1lc3NhZ2UgPSBudWxsXSwgJHNoYXJlZCA9IFtdKSB7XG4gICAgICAgIGNvbnN0IF91bndyYXBfID0gYXdhaXQgKHRoaXMuJGRlY29kZSB8fCAoIGFzeW5jIChlKSA9PiB7IFxuICAgICAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLiRtc2dwY2spPy5kZWNvZGUoZSwge3VzZUJpZ0ludDY0OiB0cnVlfSk7IH0pKT8uKG5ldyBVaW50OEFycmF5KGF3YWl0ICRtZXNzYWdlKSk7XG4gICAgICAgIF91bndyYXBfLiRhcmdzID0gYXdhaXQgUHJvbWlzZS5hbGwoX3Vud3JhcF8uJGFyZ3M/Lm1hcD8uKChtKSA9PiB0aGlzLmRlY29kZU1lbWJlcihtLCAkc2hhcmVkKSkgPz8gW10pO1xuICAgICAgICByZXR1cm4gW1tfdW53cmFwX10sIFtdXTtcbiAgICB9XG5cbiAgICAvL1xuICAgIGFzeW5jIGVuY29kZU1lc3NhZ2UoWyRkYXRhXSwgJHNoYXJlZCA9IFtdKSB7XG4gICAgICAgICRkYXRhLiRhcmdzID0gKGF3YWl0IFByb21pc2UuYWxsKCRkYXRhLiRhcmdzPy5tYXA/LigoZSkgPT4gdGhpcy5lbmNvZGVNZW1iZXIoZSwgJHNoYXJlZCkpID8/IFtdKSk7XG4gICAgICAgIGNvbnN0IF93cmFwXyA9IGF3YWl0ICh0aGlzLiRlbmNvZGUgfHwgKCBhc3luYyAoZSkgPT4geyBcbiAgICAgICAgICAgIHJldHVybiAoYXdhaXQgdGhpcy4kbXNncGNrKT8uZW5jb2RlKGUsIHt1c2VCaWdJbnQ2NDogdHJ1ZX0pOyB9KSk/LigkZGF0YSk7XG4gICAgICAgIHJldHVybiBbW193cmFwX10sIFtdXTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsWTs7QUFFQTtBQUNBLFNBQVNBLEtBQUs7QUFDZCxPQUFPQyxpQkFBaUI7O0FBRXhCO0FBQ0EsZUFBZSxNQUFNQyxtQkFBbUIsU0FBU0QsaUJBQWlCLENBQUM7O0VBRS9EO0VBQ0FFLFdBQVdBLENBQUNDLElBQUksRUFBRTtJQUNkLEtBQUssQ0FBQ0EsSUFBSSxDQUFDO0VBQ2Y7O0VBRUE7RUFDQSxNQUFNQyxhQUFhQSxDQUFDLENBQUNDLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRUMsT0FBTyxHQUFHLEVBQUUsRUFBRTtJQUNqRCxNQUFNQyxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxLQUFNLE9BQU9DLENBQUMsS0FBSztNQUNuRCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUNDLE9BQU8sR0FBR0MsTUFBTSxDQUFDRixDQUFDLEVBQUUsRUFBQ0csV0FBVyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUUsQ0FBQyxDQUFDLElBQUksSUFBSUMsVUFBVSxDQUFDLE1BQU1SLFFBQVEsQ0FBQyxDQUFDO0lBQ3RHRSxRQUFRLENBQUNPLEtBQUssR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ1QsUUFBUSxDQUFDTyxLQUFLLEVBQUVHLEdBQUcsR0FBRyxDQUFDQyxDQUFDLEtBQUssSUFBSSxDQUFDQyxZQUFZLENBQUNELENBQUMsRUFBRVosT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDckcsT0FBTyxDQUFDLENBQUNDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUMzQjs7RUFFQTtFQUNBLE1BQU1hLGFBQWFBLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLEVBQUVmLE9BQU8sR0FBRyxFQUFFLEVBQUU7SUFDdkNlLEtBQUssQ0FBQ1AsS0FBSyxHQUFJLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSyxLQUFLLENBQUNQLEtBQUssRUFBRUcsR0FBRyxHQUFHLENBQUNSLENBQUMsS0FBSyxJQUFJLENBQUNhLFlBQVksQ0FBQ2IsQ0FBQyxFQUFFSCxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBRTtJQUNqRyxNQUFNaUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUNDLE9BQU8sS0FBTSxPQUFPZixDQUFDLEtBQUs7TUFDakQsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDQyxPQUFPLEdBQUdlLE1BQU0sQ0FBQ2hCLENBQUMsRUFBRSxFQUFDRyxXQUFXLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsSUFBSVMsS0FBSyxDQUFDO0lBQzdFLE9BQU8sQ0FBQyxDQUFDRSxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7RUFDekI7QUFDSiJ9
