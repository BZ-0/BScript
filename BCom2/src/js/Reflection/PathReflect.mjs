// @ts-nocheck
"use strict"

//
import { $contextify, FakeReflect, _LOG_ } from "../Library/Symbols.mjs"
import STD from "../Library/Standard.mjs"

//
const PathReflect = {
    /** @type {Reflect} */
    $reflect: typeof Reflect != "undefined" ? Reflect : FakeReflect,
    $options: new Map([
        ["proxy", STD.classed.bind(STD)],
        ["shared", STD.shared.bind(STD)],
        ["object", STD.object.bind(STD)],
        ["class", STD.classed.bind(STD)],
        ["classed", STD.classed.bind(STD)],
        ["transfer", STD.transfer.bind(STD)]
    ]),
    get(map, _key, rec) {
        const pair = _key.split(":")
        const key = pair[0] || _key
        const option = pair[1] || ""

        const $got = this.$reflect.get(map, key, rec)
        if (this.$options.has(option)) {
            return this.$options.get(option)($got)
        }
        return $contextify(map, $got)
    },
    set(map, key, val) {
        return this.$reflect.set(map, key, val)
    },
    apply(map, self, args) {
        return this.$reflect.apply(map, self, args)
    },
    construct(map, args, T) {
        return this.$reflect.construct(map, args, T)
    },
    has(map, key) {
        return this.$reflect.has(map, key)
    },
    deleteProperty(map, key) {
        return this.$reflect.deleteProperty(map, key)
    },
    ownKeys(map) {
        return this.$reflect.ownKeys(map)
    }
}

//
export default PathReflect
export class MaPathReflect {
    constructor() {}

    get(map, key) {
        return map.get(key)
    }

    set(map, key, val) {
        return map.set(key, val)
    }

    has(map, key) {
        return map.has(key)
    }

    deleteProperty(map, key) {
        return map.delete(key)
    }

    ownKeys(map) {
        return map.keys()
    }
}

//
export const defaultMaPathReflect = new MaPathReflect()
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyIkY29udGV4dGlmeSIsIkZha2VSZWZsZWN0IiwiX0xPR18iLCJTVEQiLCJQYXRoUmVmbGVjdCIsIiRyZWZsZWN0IiwiUmVmbGVjdCIsIiRvcHRpb25zIiwiTWFwIiwiY2xhc3NlZCIsImJpbmQiLCJzaGFyZWQiLCJvYmplY3QiLCJ0cmFuc2ZlciIsImdldCIsIm1hcCIsIl9rZXkiLCJyZWMiLCJwYWlyIiwic3BsaXQiLCJrZXkiLCJvcHRpb24iLCIkZ290IiwiaGFzIiwic2V0IiwidmFsIiwiYXBwbHkiLCJzZWxmIiwiYXJncyIsImNvbnN0cnVjdCIsIlQiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJNYVBhdGhSZWZsZWN0IiwiY29uc3RydWN0b3IiLCJkZWxldGUiLCJrZXlzIiwiZGVmYXVsdE1hUGF0aFJlZmxlY3QiXSwic291cmNlcyI6WyJDOlxcUHJvamVjdHNcXEJaMFxcQkNvbTJcXHNyY1xcY2l2ZXRcXFJlZmxlY3Rpb25cXFBhdGhSZWZsZWN0LmNpdmV0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1ub2NoZWNrXG5cInVzZSBzdHJpY3RcIjtcblxuLy9cbmltcG9ydCB7ICRjb250ZXh0aWZ5LCBGYWtlUmVmbGVjdCwgX0xPR18gfSBmcm9tIFwiLi4vTGlicmFyeS9TeW1ib2xzXCI7XG5pbXBvcnQgU1REIGZyb20gXCIuLi9MaWJyYXJ5L1N0YW5kYXJkXCI7XG5cbi8vXG5jb25zdCBQYXRoUmVmbGVjdCA9IHtcbiAgICAvKiogQHR5cGUge1JlZmxlY3R9ICovXG4gICAgJHJlZmxlY3Q6ICh0eXBlb2YgUmVmbGVjdCAhPSBcInVuZGVmaW5lZFwiID8gUmVmbGVjdCA6IEZha2VSZWZsZWN0KSxcbiAgICAkb3B0aW9uczogbmV3IE1hcChbXG4gICAgICAgIFtcInByb3h5XCIsIFNURC5jbGFzc2VkLmJpbmQoU1REKV0sXG4gICAgICAgIFtcInNoYXJlZFwiLCBTVEQuc2hhcmVkLmJpbmQoU1REKV0sXG4gICAgICAgIFtcIm9iamVjdFwiLCBTVEQub2JqZWN0LmJpbmQoU1REKV0sXG4gICAgICAgIFtcImNsYXNzXCIsIFNURC5jbGFzc2VkLmJpbmQoU1REKV0sXG4gICAgICAgIFtcImNsYXNzZWRcIiwgU1RELmNsYXNzZWQuYmluZChTVEQpXSxcbiAgICAgICAgW1widHJhbnNmZXJcIiwgU1RELnRyYW5zZmVyLmJpbmQoU1REKV0sXG4gICAgXSksXG4gICAgZ2V0KG1hcCwgX2tleSwgcmVjKSB7XG4gICAgICAgIGNvbnN0IHBhaXIgPSBfa2V5LnNwbGl0KFwiOlwiKTtcbiAgICAgICAgY29uc3Qga2V5ID0gcGFpclswXSB8fCBfa2V5O1xuICAgICAgICBjb25zdCBvcHRpb24gPSBwYWlyWzFdIHx8IFwiXCI7XG5cbiAgICAgICAgY29uc3QgJGdvdCA9IHRoaXMuJHJlZmxlY3QuZ2V0KG1hcCwga2V5LCByZWMpO1xuICAgICAgICBpZiAodGhpcy4kb3B0aW9ucy5oYXMob3B0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJG9wdGlvbnMuZ2V0KG9wdGlvbikoJGdvdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRjb250ZXh0aWZ5KG1hcCwgJGdvdCk7XG4gICAgfSxcbiAgICBzZXQobWFwLCBrZXksIHZhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kcmVmbGVjdC5zZXQobWFwLCBrZXksIHZhbCk7XG4gICAgfSxcbiAgICBhcHBseShtYXAsIHNlbGYsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHJlZmxlY3QuYXBwbHkobWFwLCBzZWxmLCBhcmdzKTtcbiAgICB9LFxuICAgIGNvbnN0cnVjdChtYXAsIGFyZ3MsIFQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHJlZmxlY3QuY29uc3RydWN0KG1hcCwgYXJncywgVCk7XG4gICAgfSxcbiAgICBoYXMobWFwLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHJlZmxlY3QuaGFzKG1hcCwga2V5KTtcbiAgICB9LFxuICAgIGRlbGV0ZVByb3BlcnR5KG1hcCwga2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRyZWZsZWN0LmRlbGV0ZVByb3BlcnR5KG1hcCwga2V5KTtcbiAgICB9LFxuICAgIG93bktleXMobWFwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRyZWZsZWN0Lm93bktleXMobWFwKTtcbiAgICB9XG59O1xuXG4vL1xuZXhwb3J0IGRlZmF1bHQgUGF0aFJlZmxlY3Q7XG5leHBvcnQgY2xhc3MgTWFQYXRoUmVmbGVjdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB9O1xuXG4gICAgZ2V0KG1hcCwga2V5KSB7XG4gICAgICAgIHJldHVybiBtYXAuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgc2V0KG1hcCwga2V5LCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIG1hcC5zZXQoa2V5LCB2YWwpO1xuICAgIH1cblxuICAgIGhhcyhtYXAsIGtleSkge1xuICAgICAgICByZXR1cm4gbWFwLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIGRlbGV0ZVByb3BlcnR5KG1hcCwga2V5KSB7XG4gICAgICAgIHJldHVybiBtYXAuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgb3duS2V5cyhtYXApIHtcbiAgICAgICAgcmV0dXJuIG1hcC5rZXlzKCk7XG4gICAgfVxufTtcblxuLy9cbmV4cG9ydCBjb25zdCBkZWZhdWx0TWFQYXRoUmVmbGVjdCA9IG5ldyBNYVBhdGhSZWZsZWN0KCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsWTs7QUFFQTtBQUNBLFNBQVNBLFdBQVcsRUFBRUMsV0FBVyxFQUFFQyxLQUFLO0FBQ3hDLE9BQU9DLEdBQUc7O0FBRVY7QUFDQSxNQUFNQyxXQUFXLEdBQUc7RUFDaEI7RUFDQUMsUUFBUSxFQUFHLE9BQU9DLE9BQU8sSUFBSSxXQUFXLEdBQUdBLE9BQU8sR0FBR0wsV0FBWTtFQUNqRU0sUUFBUSxFQUFFLElBQUlDLEdBQUcsQ0FBQztFQUNkLENBQUMsT0FBTyxFQUFFTCxHQUFHLENBQUNNLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDUCxH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
